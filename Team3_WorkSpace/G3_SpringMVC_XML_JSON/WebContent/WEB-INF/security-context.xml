<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	  http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	<!-- [ 1단계 ] : in-memory 방식 권한 처리
		 - auto-config="true" : spring security가 제공하는 환경 설정을 사용하겠다.
		 - 자동화된 폼 등을 제공 > 분석작업은 해야함
		 - 실 업무에서는 DB를 사용
		  <security:http 
		auto-config="true">
		 <security:intercept-url pattern="/customer/noticeDetail.htm" 
		access="hasRole('ROLE_USER')"/> 
		<security:intercept-url pattern="/customer/noticeReg.htm" 
		access="hasRole('ROLE_ADMIN')"/>
		 </security:http> 
		 <security:authentication-manager> 
		<security:authentication-provider> 
		<security:user-service> 
		<security:user 
		name = "danbi" password = "1004" authorities="ROLE_USER"/> 
		<security:user 
		name = "hong" password = "1004" authorities="ROLE_USER,ROLE_ADMIN"/> 
		</security:user-service> 
		</security:authentication-provider> </security:authentication-manager> -->

	<!-- [ 2단계 ]
		 <security:http>
		   <security:csrf disabled="true"/>
		    <security:form-login login-page="/joinus/login.htm"
		    					 authentication-failure-url="/joinus/login.htm?error"/>
		 	<security:logout logout-success-url="/index.htm" />
			<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
			<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
		</security:http>
		<security:authentication-manager>
		   <security:authentication-provider>
		      <security:user-service>
		         <security:user name = "danbi" password = "1004" authorities="ROLE_USER"/>
		         <security:user name = "hong" password = "1004" authorities="ROLE_USER,ROLE_ADMIN"/>
		      </security:user-service>
		   </security:authentication-provider>
		</security:authentication-manager>
 -->
	<!-- 
			[ 3단계 ] 
			- 테이블로 구성된 DB 연동
			- roll 테이블 생성(권한 정보)
	-->
	 <security:http>
	   <security:csrf disabled="true"/>
	    <security:form-login login-page="/joinus/login.htm"
	    					 authentication-failure-url="/joinus/login.htm?error"/>
	 	<security:logout logout-success-url="/index.htm" />
<!-- 		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/> -->
			<security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_USER')" />
			<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
	<security:authentication-provider>

	<security:jdbc-user-service data-source-ref="driverManagerDataSource"
								users-by-username-query="SELECT USERID,pwd AS PASSWORD,1 enabled FROM member WHERE userid=?"
								authorities-by-username-query="select m.userid, r.ROLE_NAME 
															from member m join roll r 
															on m.userid = r.userid 
															where m.userid=?" />
		<security:password-encoder ref="bCryptPasswordEncoder"/>
	</security:authentication-provider>
	</security:authentication-manager>
	<security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"/>
</beans>